{
    "variables": {},
    "builders": [
      {
        "access_key": "{{user `aws_access_key`}}",
        "ami_name": "{{user `vm_name`}}-{{user `github_sha`}}",
        "instance_type": "t3.large",
        "region": "{{user `region`}}",
        "secret_key": "{{user `aws_secret_key`}}",

        "user_data_file": "{{user `user_data_file`}}",

        "ssh_username":         "{{ user `ssh_user` }}",
        "ssh_keypair_name":     "{{ user `ssh_keypair_name` }}",
        "ssh_private_key_file": "{{ user `ssh_private_key_file` }}",
        "ssh_timeout": "20m",
        "security_group_id": "{{ user `security_group_id` }}",
        "type": "amazon-ebs",
        "ami_regions": ["{{user `region`}}"],
        "source_ami_filter": {
            "filters": {
            "virtualization-type": "hvm",
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*",
            "root-device-type": "ebs"
            },
            "owners": ["099720109477"],
            "most_recent": true
         },
        "tags": {
            "OS_Version": "Ubuntu-20.04",
            "Base_AMI_Name": "{{ .SourceAMIName }}"
        },
        "run_tags": {
            "Name": "Packer Builder {{user `vm_name`}}",
            "Team": "{{user `team_tag`}}",
            "Owner": "{{user `owner_tag`}}",
            "Scope": "#k8s-compliant-kubernetes",
            "Delete": "No"
        },
        "launch_block_device_mappings": [
          {
            "device_name": "/dev/sda1",
            "volume_type": "gp2",
            "delete_on_termination": true
          }
        ]
      }
    ],
      "provisioners": [
        {
          "type": "shell",
          "inline": [ "sleep 30", "sudo apt -y update && sudo apt -y upgrade" ]
        },
        {
          "type": "shell",
          "inline": [ "sudo apt -y install python3-pip", "sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz" ]
        },
        {
          "type": "shell",
          "inline": [ "ec2metadata --local-ipv4 > /tmp/private_ip" ]
        },
        {
          "type": "shell",
          "inline": ["curl http://checkip.amazonaws.com -o /tmp/public_ip"]
        },
        {
          "type": "file",
          "direction": "download",
          "source": "/tmp/private_ip",
          "destination": "private_ip"
        },
        {
          "type": "file",
          "direction": "download",
          "source": "/tmp/public_ip",
          "destination": "public_ip"
        },
        {
          "type":                 "shell-local",
          "inline":               ["sed 's/\\./-/g' private_ip > private_ip_underscore", "PRIVATE_IP=$(cat private_ip_underscore)", "cd {{ user `ck8s_config_path` }}/wc-config", "sed 's/{PRIVATE_IP}/'\"${PRIVATE_IP}\"'/g' inventory.ini.template > inventory.ini"]
        },
        {
          "type":                 "shell-local",
          "inline":               ["PUBLIC_IP=$(cat public_ip)", "cd {{ user `ck8s_config_path` }}/wc-config", "sed -i 's/{PUBLIC_IP}/'\"${PUBLIC_IP}\"'/g' inventory.ini", "sed 's/{PUBLIC_IP}/'\"${PUBLIC_IP}\"'/g' group_vars/k8s-cluster/k8s-cluster.yml.template > group_vars/k8s-cluster/k8s-cluster.yml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-kubespray/", "git submodule init", "git submodule update", "cd kubespray", "git checkout v2.15.0", "cd ..", "./bin/ck8s-kubespray apply wc"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["PRIVATE_IP=$(cat private_ip)", "PUBLIC_IP=$(cat public_ip)", "cd {{ user `ck8s_config_path` }}", "sops -i -d .state/kube_config_wc.yaml", "sed -i 's/'172.17.0.100'/'\"${PUBLIC_IP}\"'/' .state/kube_config_wc.yaml", "sops -i -e .state/kube_config_wc.yaml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-apps", "./bin/ck8s ops kubectl wc apply -f ../local-storage-pv.yaml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-apps", "./bin/ck8s apply wc"]
        },
        {
          "type":                 "shell",
          "inline":               ["sudo mkdir -p /mnt/disks/", "sudo chown -R 1000:1000 /mnt/disks/"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["../../compliantkubernetes-apps/bin/ck8s ops kubectl wc apply -f ../../default-restricted-psp.yaml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["../../compliantkubernetes-apps/bin/ck8s ops helmfile wc -f ../../wip-helmfile-glasswall-icap.yaml apply"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-apps/", "openssl req -newkey rsa:2048 -nodes -keyout tls.key -x509 -days 365 -out certificate.crt -subj \"/C=SE/ST=Vasterbotten/L=Umea/O=Elastisys/OU=Development/CN=ssl.elastisys.org\"", "./bin/ck8s ops kubectl wc create secret tls icap-service-tls-config --namespace icap-adaptation --key tls.key --cert certificate.crt"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-apps/", "./bin/ck8s ops kubectl wc delete service frontend-icap-lb -n icap-adaptation", "./bin/ck8s ops kubectl wc patch service/icap-service -n icap-adaptation -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"port\\\":1344,\\\"nodePort\\\":1344}]}}'", "./bin/ck8s ops kubectl wc patch service/icap-service -n icap-adaptation -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"port\\\":1345,\\\"nodePort\\\":1345}]}}'"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               ["cd ../../compliantkubernetes-apps/", "./bin/ck8s ops kubectl wc create -n icap-adaptation secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --docker-email=${DOCKER_EMAIL}"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}", "GNUPGHOME={{ user `gnu_pgp_home` }}"],
          "inline":               [
            "wget https://raw.githubusercontent.com/k8-proxy/cs-k8s-api/main/deployment.yaml",
            "sed -i 's|<REPLACE_IMAGE_ID>|{{user `cs_api_image`}}|' deployment.yaml",
            "../../compliantkubernetes-apps/bin/ck8s ops kubectl wc apply -n icap-adaptation -f deployment.yaml",
            "../../compliantkubernetes-apps/bin/ck8s ops kubectl wc patch service/proxy-rest-api -n icap-adaptation -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"port\\\":8080,\\\"targetPort\\\":80,\\\"nodePort\\\":8080}]},{\\\"type\\\": \\\"NodePort\\\"}}'"
            ]
        },
        {
          "type": "shell-local",
          "inline_shebang": "/bin/bash",
          "inline": [
              "set -e",
              "CREATE_OVA={{user `create_ova`}}",
              "if [[ $CREATE_OVA == 'true' ]]; then",
              "aws ec2 create-instance-export-task --region {{user `region`}} --instance-id {{build `ID`}} --target-environment vmware --export-to-s3-task file://ova-export.json > out.json",
              "fi"
          ]
      },
      {
          "type": "shell-local",
          "environment_vars": ["OVA_NAME={{user `vm_name`}}-{{user `github_sha`}}.ova", "VM_NAME={{user `vm_name`}}", "CREATE_OVA={{user `create_ova`}}"],
          "inline": [
              "chmod +x ova-check.sh",
              "./ova-check.sh"            
          ]
      }
    ]
}
